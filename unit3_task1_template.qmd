---
title: "Client Report - Missing Data and JSON"
subtitle: "Unit 3 Task 1"
author: "William Hardy"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_json("https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json")
```

## QUESTION 1

__Fix all of the varied missing data types in the data to be consistent: use np.nan to represent missing value.__ In your report include one record example (one row) from your clean data, in the raw JSON format. Your example should display at least one missing value so that we can verify it was done correctly. (Note: JSON will convert NaN's to "null"). Describe your process for finding values that needed to be changed, and how you changed them.__ 

_To prepare the data for analysis, I inspected each columnâ€™s unique values using a loop. This helped me identify non-standard representations of missing data such as: `""` (empty strings) in the `airport_name` column, and `"n/a"` in the `month` column These values were replaced using the `.replace()` function in pandas: df.replace(["", "n/a"], np.nan, inplace=True)_

```{python}
for col in df.columns:
  print(f"{col}: {df[col].unique()}")

# Replace non-standard missing values with np.nan
df.replace(["", "n/a"], np.nan, inplace=True)

# Show a sample row that has at least one missing value
sample_row = df[df.isna().any(axis=1)].iloc[0]
print(sample_row.to_json(indent=2))
```

