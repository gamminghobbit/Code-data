---
title: "Client Report - Can You Predict That?"
subtitle: "Unit 4 Task 1"
author: "William Hardy"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
from lets_plot import *
# add the additional libraries you need to import for ML here
df = pd.read_csv("dwellings_ml.csv")

# Create target column
df['before1980'] = df['yrbuilt'] < 1980

# Explore data
display(df.shape)
display(df.head())
display(df.isnull().sum())
display(df.dtypes)
display(df['before1980'].value_counts(normalize=True))
LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# import your data here using pandas and the URL
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Prep features and labels
X = df.drop(columns=['before1980', 'yrbuilt', 'parcel'])
y = df['before1980']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Build model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predictions and accuracy
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2%}")

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

```

## QUESTION

__Build a classification model labeling houses as being built “before 1980” or “during or after 1980”.__ Your goal is to reach or exceed 90% accuracy. Report your final model choice and any other model parameters you may have tweaked (train-test split ratio, tuning parameters, etc).  

_We used a Random Forest Classifier with default parameters and achieved 92.88% accuracy on our test set. We removed yrbuilt to avoid leaking the answer. Our model performs well on both pre-1980 and post-1980 homes, and the top predictive features included things like livearea, "quality-C", and "condition-Good"._

```{python}
# Include and execute your code here
# Feature importance
importances = model.feature_importances_
features = X.columns
feat_series = pd.Series(importances, index=features).sort_values(ascending=True)

# Plot
feat_series.tail(10).plot(kind='barh', title='Top 10 Most Important Features')
plt.xlabel('Importance Score')
plt.ylabel('Feature')
plt.tight_layout()
plt.show()
```

