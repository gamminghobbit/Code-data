---
title: "Client Report - BYU-Idaho Players and Comparing Teams"
subtitle: "Unit 2 Task 2"
author: "William Hardy"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Unit 2 Code Along__

__I see that the the the five batters have the same batting average, and that there is no corrolation between them when we compare them to the years they played in._

```{python}
query1 = """
SELECT playerID, yearID, CAST(H AS FLOAT)/AB AS batting_average
FROM Batting
WHERE AB >= 1
ORDER BY batting_average DESC, playerID ASC
LIMIT 5;
"""
batting_avg_1ab = pd.read_sql_query(query1, con)
batting_avg_1ab
```


## QUESTION 2

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__  

_I have noticed that the batters had an average around 60% of succesful hits._

```{python}
query2 = """
SELECT playerID, yearID, CAST(H AS FLOAT)/AB AS batting_average
FROM Batting
WHERE AB >= 10
ORDER BY batting_average DESC, playerID ASC
LIMIT 5;
"""
batting_avg_10ab = pd.read_sql_query(query2, con)
batting_avg_10ab
```


## QUESTION 3

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats over their entire career, and print the top 5 results.__

_Personal opinion? they suck!, However, this is the best results having practially an average of  35.8% of succesussful batting attempts._

```{python}
query3 = """
SELECT playerID, SUM(H) * 1.0 / SUM(AB) AS career_avg
FROM Batting
GROUP BY playerID
HAVING SUM(AB) >= 100
ORDER BY career_avg DESC, playerID ASC
LIMIT 5;
"""
career_avg = pd.read_sql_query(query3, con)
career_avg
```